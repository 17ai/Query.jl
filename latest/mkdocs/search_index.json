{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to Query\n\n\n\n\nOverview\n\n\nQuery allows you to execute queries against almost any julia data structure.\n\n\n\n\nInstallation\n\n\nThis package only works on julia 0.5- and newer. First, clone the package:\n\n\nPkg.clone(\nhttps://github.com/davidanthoff/Query.jl.git\n)\n\n\n\n\nIf you want to use the following packages with Query, you need to check out their $master$ branch first:\n\n\nPkg.checkout(\nTypedTables\n)\nPkg.checkout(\nSQLite\n)", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-query", 
            "text": "", 
            "title": "Welcome to Query"
        }, 
        {
            "location": "/#overview", 
            "text": "Query allows you to execute queries against almost any julia data structure.", 
            "title": "Overview"
        }, 
        {
            "location": "/#installation", 
            "text": "This package only works on julia 0.5- and newer. First, clone the package:  Pkg.clone( https://github.com/davidanthoff/Query.jl.git )  If you want to use the following packages with Query, you need to check out their $master$ branch first:  Pkg.checkout( TypedTables )\nPkg.checkout( SQLite )", 
            "title": "Installation"
        }, 
        {
            "location": "/tutorial/", 
            "text": "Tutorial\n\n\n\n\nFirst steps\n\n\nYou can use Query to filter and transform columns from a $DataFrame$ and then create a new $DataFrame$ for the output:\n\n\nusing Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[\nJohn\n, \nSally\n, \nKirk\n], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age\n30. \n i.children \n 2\n    @select @NT(Name=\nlowercase(i.name))\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n1\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 Name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 \nsally\n \u2502\n\n\n\n\nYou don't have to start with a $DataFrame$, you can also query a $Dict$ and then collect the results into a $DataFrame$:\n\n\nusing Query, DataFrames, NamedTuples\n\nsource = Dict(\nJohn\n=\n34., \nSally\n=\n56.)\n\nresult = @from i in source begin\n         @where i.second\n36.\n         @select @NT(Name=\nlowercase(i.first))\n         @collect DataFrame\nend\n\nprintln(result)\n\n# output\n\n1\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 Name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 \nsally\n \u2502\n\n\n\n\nOr you can start with just an array that holds some self-defined type:\n\n\nusing Query, DataFrames, NamedTuples\n\nimmutable Person\n    Name::String\n    Friends::Vector{String}\nend\n\nsource = Array(Person,0)\npush!(source, Person(\nJohn\n, [\nSally\n, \nMiles\n, \nFrank\n]))\npush!(source, Person(\nSally\n, [\nDon\n, \nMartin\n]))\n\nresult = @from i in source begin\n         @where length(i.Friends) \n 2\n         @select @NT( Name=\ni.Name, Friendcount=\nlength(i.Friends))\n         @collect DataFrame\nend\n\nprintln(result)\n\n# output\n\n1\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 Name   \u2502 Friendcount \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 \nJohn\n \u2502 3           \u2502\n\n\n\n\nYou also don't have to collect into a $DataFrame$, you can for example collect just one filtered column into an $Array$:\n\n\nusing Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[\nJohn\n, \nSally\n, \nKirk\n], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age\n30. \n i.children \n 2\n    @select lowercase(i.name)\n    @collect\nend\n\nprintln(x)\n\n# output\n\nString[\nsally\n]\n\n\n\n\nYou can also not collect at all and instead just iterate over the results of your query:\n\n\nusing Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[\nJohn\n, \nSally\n, \nKirk\n], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age\n30. \n i.children \n 2\n    @select @NT(Name=\nlowercase(i.name), Kids=\ni.children)\nend\n\nfor j in x\n    println(\n$(j.Name) has $(j.Kids) children.\n)\nend\n\n# output\n\nsally has 5 children.\n\n\n\n\n\n\n@let statement\n\n\nThe $@let$ statement allows you to define range variables inside your query:\n\n\nusing Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[\nJohn\n, \nSally\n, \nKirk\n], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @let name_length = length(i.name)\n    @where name_length \n= 4\n    @select @NT(Name=\nlowercase(i.name), Length=\nname_length)\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n 2\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 Name   \u2502 Length \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 \njohn\n \u2502 4      \u2502\n\u2502 2   \u2502 \nkirk\n \u2502 4      \u2502\n\n\n\n\n\n\n@join statement\n\n\nusing DataFrames, Query, NamedTuples, TypedTables\n\ndf1 = DataFrame(a=[1,2,3], b=[1.,2.,3.])\ndf2 = @Table(c=[2.,4.,2.], d=[\nJohn\n, \nJim\n,\nSally\n])\n\nx = @from i in df1 begin\n    @join j in df2 on i.a equals convert(Int,j.c)\n    @select @NT(a=\ni.a,b=\ni.b,c=\nj.c,d=\nj.d,e=\nName: $(j.d)\n)\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n2\u00d75 DataFrames.DataFrame\n\u2502 Row \u2502 a \u2502 b   \u2502 c   \u2502 d       \u2502 e             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 2 \u2502 2.0 \u2502 2.0 \u2502 \nJohn\n  \u2502 \nName: John\n  \u2502\n\u2502 2   \u2502 2 \u2502 2.0 \u2502 2.0 \u2502 \nSally\n \u2502 \nName: Sally\n \u2502", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#tutorial", 
            "text": "", 
            "title": "Tutorial"
        }, 
        {
            "location": "/tutorial/#first-steps", 
            "text": "You can use Query to filter and transform columns from a $DataFrame$ and then create a new $DataFrame$ for the output:  using Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[ John ,  Sally ,  Kirk ], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age 30.   i.children   2\n    @select @NT(Name= lowercase(i.name))\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n1\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 Name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502  sally  \u2502  You don't have to start with a $DataFrame$, you can also query a $Dict$ and then collect the results into a $DataFrame$:  using Query, DataFrames, NamedTuples\n\nsource = Dict( John = 34.,  Sally = 56.)\n\nresult = @from i in source begin\n         @where i.second 36.\n         @select @NT(Name= lowercase(i.first))\n         @collect DataFrame\nend\n\nprintln(result)\n\n# output\n\n1\u00d71 DataFrames.DataFrame\n\u2502 Row \u2502 Name    \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502  sally  \u2502  Or you can start with just an array that holds some self-defined type:  using Query, DataFrames, NamedTuples\n\nimmutable Person\n    Name::String\n    Friends::Vector{String}\nend\n\nsource = Array(Person,0)\npush!(source, Person( John , [ Sally ,  Miles ,  Frank ]))\npush!(source, Person( Sally , [ Don ,  Martin ]))\n\nresult = @from i in source begin\n         @where length(i.Friends)   2\n         @select @NT( Name= i.Name, Friendcount= length(i.Friends))\n         @collect DataFrame\nend\n\nprintln(result)\n\n# output\n\n1\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 Name   \u2502 Friendcount \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502  John  \u2502 3           \u2502  You also don't have to collect into a $DataFrame$, you can for example collect just one filtered column into an $Array$:  using Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[ John ,  Sally ,  Kirk ], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age 30.   i.children   2\n    @select lowercase(i.name)\n    @collect\nend\n\nprintln(x)\n\n# output\n\nString[ sally ]  You can also not collect at all and instead just iterate over the results of your query:  using Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[ John ,  Sally ,  Kirk ], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @where i.age 30.   i.children   2\n    @select @NT(Name= lowercase(i.name), Kids= i.children)\nend\n\nfor j in x\n    println( $(j.Name) has $(j.Kids) children. )\nend\n\n# output\n\nsally has 5 children.", 
            "title": "First steps"
        }, 
        {
            "location": "/tutorial/#let-statement", 
            "text": "The $@let$ statement allows you to define range variables inside your query:  using Query, DataFrames, NamedTuples\n\ndf = DataFrame(name=[ John ,  Sally ,  Kirk ], age=[23., 42., 59.], children=[3,5,2])\n\nx = @from i in df begin\n    @let name_length = length(i.name)\n    @where name_length  = 4\n    @select @NT(Name= lowercase(i.name), Length= name_length)\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n 2\u00d72 DataFrames.DataFrame\n\u2502 Row \u2502 Name   \u2502 Length \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502  john  \u2502 4      \u2502\n\u2502 2   \u2502  kirk  \u2502 4      \u2502", 
            "title": "@let statement"
        }, 
        {
            "location": "/tutorial/#join-statement", 
            "text": "using DataFrames, Query, NamedTuples, TypedTables\n\ndf1 = DataFrame(a=[1,2,3], b=[1.,2.,3.])\ndf2 = @Table(c=[2.,4.,2.], d=[ John ,  Jim , Sally ])\n\nx = @from i in df1 begin\n    @join j in df2 on i.a equals convert(Int,j.c)\n    @select @NT(a= i.a,b= i.b,c= j.c,d= j.d,e= Name: $(j.d) )\n    @collect DataFrame\nend\n\nprintln(x)\n\n# output\n\n2\u00d75 DataFrames.DataFrame\n\u2502 Row \u2502 a \u2502 b   \u2502 c   \u2502 d       \u2502 e             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 1   \u2502 2 \u2502 2.0 \u2502 2.0 \u2502  John   \u2502  Name: John   \u2502\n\u2502 2   \u2502 2 \u2502 2.0 \u2502 2.0 \u2502  Sally  \u2502  Name: Sally  \u2502", 
            "title": "@join statement"
        }
    ]
}